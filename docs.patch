diff --git a/README.md b/README.md
index d78b62c..0ff388e 100644
--- a/README.md
+++ b/README.md
@@ -1,71 +1,89 @@
 # Microsoft Azure Cloud Provider for Idem
-
 Azure is a cloud service offered by Microsoft that provides virtual machines, SQL services, media services, and more.
-Azure Resource Manager is the next generation of the Azure portal and API. This provider is a [POP](https://gitlab.com/saltstack/pop/pop)
-plugin and an extension of [Idem](https://gitlab.com/saltstack/pop/idem), allowing Idem users to leverage Microsoft
-Azure Resource Manager functionality to enforce the state of cloud infrastructure, applications, configurations, and
-more.
+Azure Resource Manager is the next generation of the Azure portal and API. This provider is a
+[POP](https://gitlab.com/saltstack/pop/pop) plugin and an extension of [Idem](https://gitlab.com/saltstack/pop/idem),
+allowing Idem users to leverage Microsoft Azure Resource Manager functionality to enforce the state of cloud
+infrastructure, applications, configurations, and more.
 
 ## INSTALLATION
 The azurerm idem provider can be installed via pip:
-`pip install idem-azurerm`
+```
+pip install idem-azurerm
+```
 
 ## INSTALLATION FOR DEVELOPMENT
-1. Clone the `idem-azurerm` repository and install with pip:
-`pip install -r requirements.txt`
-2. Run `pip install -e <path to provider>` from your project's root directory
-
+1. Clone the `idem-azurerm` repository.
+2. Install requirements with pip:
+```
+pip install -r requirements.txt
+```
+3. Install `idem-azurerm` in "editable" mode:
+```
+pip install -e <path cloned repo>
+```
 You are now fully set up to begin developing additional functionality for this provider.
 
-## EXECUTION
+## CREDENTIALS
+This provider requires that a dictionary populated with valid Azure credentials be passed via
+[acct](https://gitlab.com/saltstack/pop/acct).
 
-The following example uses an azurerm state module to ensure the existence of a resource group.
-
-Lets call this file myTest.sls
+The credentials can be stored in an arbitrarily named file, such as `myawesomecreds.yml`
 ```
-Resource group exists:
-  azurerm.resource.group.present:
-    - name: idem
-    - location: eastus
-    - tags:
-        organization: EITR Technologies
-    - connection_auth: {{ profile }}
+#!yaml
+
+azurerm:
+  default:
+    client_id: "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
+    secret: "X2KRwdcdsQn9mwjdt0EbxsQR3w5TuBOR"
+    subscription_id: "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"
+    tenant: "cccccccc-cccc-cccc-cccc-cccccccccccc"
 ```
 
-# Security
-
-To make the file more secure, use the acct command to encrypt the file with the Fernet algorithm.
-
+In order to prepare the credentials file for use, the acct command can be run to encrypt the file with the Fernet
+algorithm.
 ```
 (env) $ acct myawesomecreds.yml
-New encrypted file at:myawesomecreds.yml.fernet
+New encrypted file at: myawesomecreds.yml.fernet
 The file was encrypted with this key:
 71Gbz2oDSv40Er9YUFBJPzOjtCi6Z2-5niBHPekkvqs=
 ```
-Now we have an encrypted file containing the file and a symmetric key. You can use that key to decrypt the encrypted file.
-
-Since you have the encrypted file with the key you can remove the original file.
 
+Now we have an encrypted file containing the credentials and a symmetric key for decryption. Since you have encrypted
+the file with the key, you can now remove the original plaintext file.
 ```
 (env) $ rm myawesomecreds.yml
+```
 
+All we have to do now is to tell idem where to get the file and key for acct. This information can be passed to acct on
+the command line as parameters, but we will set up environment variables for the purposes of this tutorial.
+```
+(env) $ export ACCT_FILE="/path/to/myawesomecreds.yml.fernet"
+(env) $ export ACCT_KEY="1Gbz2oDSv40Er9YUFBJPzOjtCi6Z2-5niBHPekkvqs="
 ```
 
- # Setting up Environment Variables
+## RESOURCE DEFINITION
+After installation, the Azure Resource Manager Idem Provider execution and state modules will be accessible to the hub.
 
- All we have to do now is to tell idem where to get the file and key for acct. So we will set up environment variables to do those tasks.
+The following example uses an azurerm state module to ensure the existence of a resource group.
 
+Let's call this file "mytest.sls"
 ```
-(env) $ export ACCT_FILE="<location_of_fernent_file>"
-(env) $ export ACCT_KEY="1Gbz2oDSv40Er9YUFBJPzOjtCi6Z2-5niBHPekkvqs="
+Resource group exists:
+  azurerm.resource.group.present:
+    - name: idem
+    - location: eastus
+    - tags:
+        organization: EITR Technologies
 ```
 
-# Testing and Building
-Before you build the .sls file you will need to to test the file. To do this, please use the following code.
+## TESTING AND BUILDING RESOURCES
+Before you build the resources defined in the ".sls" file you may want to test what will happen when the state file is
+run. To do this, run idem with the `--test` option.
 ```
-(env) $ idem state myTest.sls --test
+(env) $ idem state mytest.sls --test
 ```
-Once you got that to work, then you can build the file by using the following code.
+Once you determine that your state file will perform the intended operations, then you can build the defined resources
+by running idem like so:
 ```
-(env) $ idem state myTest.sls
+(env) $ idem state mytest.sls
 ```
diff --git a/docs/releases/2.2.rst b/docs/releases/2.2.rst
index 50a7e5d..0a02afe 100644
--- a/docs/releases/2.2.rst
+++ b/docs/releases/2.2.rst
@@ -6,7 +6,7 @@ Added Acct Support for Exec Modules
 ===================================
 We updated the exec modules to pass context to ``get_client``.
 We also updated the state modules to pass context to exec modules.
-In addition to that, we have  updated the utiles to receive context on ``get_client`` and pass to ``determine_auth``
+In addition to that, we have updated the utilities to receive context on ``get_client`` and pass to ``determine_auth``

 Other Updates
 =============
